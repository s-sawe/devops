name: Django CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r ecommerce/requirements.txt

      - name: Run migrations & tests
        env:
          DATABASE_URL: sqlite:///db.sqlite3
        run: |
          # use sqlite for CI quick tests
          python manage.py migrate --noinput
          python manage.py test --verbosity=2

  build_and_scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:${{ github.sha }} -f ecommerce/Dockerfile .
          docker tag ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:latest

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:latest

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@v0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:latest

  deploy_to_ec2:
    needs: build_and_scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2 (pull & restart Docker)
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            docker pull $DOCKER_USER/ecommerce-app:latest
            docker stop ecommerce-app || true
            docker rm ecommerce-app || true
            docker run -d --name ecommerce-app -p 8000:8000 --env-file /home/${{ secrets.SSH_USER }}/ecommerce/.env $DOCKER_USER/ecommerce-app:latest
            exit
          EOF
